# OpenFront Nuke Radius Overlay - Technical Documentation

## Overview
The OpenFront Nuke Radius Overlay is a sophisticated Tampermonkey userscript that provides real-time visual indication of nuclear weapon blast radii in the OpenFront.io browser game. The script modifies actual game tile colors to show precise nuke damage ranges that scale correctly with zoom levels and follow the mouse cursor in real-time.

## Features
- **Tab Key Cycling**: Press Tab to cycle through overlay modes: None → Atom Bomb → Hydrogen Bomb → None (repeat)
- **Real-time Mouse Tracking**: Overlay circles follow the mouse cursor and update positions in game coordinates
- **Accurate Game-Scale Radii**: Uses exact radius values from game source code that scale with zoom level
- **Outline-Only Display**: Shows only the border/outline of blast radius for better visibility of interior tiles
- **Dynamic Pixel Management**: Properly handles underlying tile updates while overlay is active
- **Automatic Cleanup**: Restores original tile colors when overlay moves or is disabled

## Technical Implementation

### Core Architecture

#### Game Coordinate Integration
The script hooks directly into the game's rendering pipeline using:
- **TransformHandler Access**: Obtained through game UI elements (build-menu, emoji-table, player-info-overlay)
- **Game Object Access**: Direct access to game state and tile management functions
- **Coordinate Conversion**: Real-time conversion between screen coordinates and game tile coordinates

#### Radius Values (from DefaultConfig.ts)
```javascript
const NUKE_RADII = {
    ATOM_BOMB: 30,      // outer radius of atom bomb in game tiles
    HYDROGEN_BOMB: 100  // outer radius of hydrogen bomb in game tiles
};
```

These values are extracted from the game's source code at:
`/src/core/configuration/DefaultConfig.ts` in the `nukeMagnitudes()` function

### Advanced Rendering Hook System

#### ImageData Interception
The script uses a sophisticated approach to modify actual game tile colors:

```javascript
// Hook into CanvasRenderingContext2D.prototype.putImageData
const originalPutImageData = CanvasRenderingContext2D.prototype.putImageData;
CanvasRenderingContext2D.prototype.putImageData = function(imageData, dx, dy, ...args) {
    // Intercept and modify imageData before it's rendered
    // Apply nuke radius overlay to actual tile pixels
    return originalPutImageData.call(this, imageData, dx, dy, ...args);
};
```

#### Dynamic Pixel State Management
- **Original Color Storage**: Preserves original tile colors in a Map for restoration
- **Overlay Tile Tracking**: Maintains Set of currently modified tile indices
- **Update Detection**: Detects when game updates pixels that are currently overlayed
- **Automatic Restoration**: Restores original colors when overlay moves or is disabled

### Outline-Only Rendering Algorithm

#### Border Detection Logic
```javascript
function shouldHighlightTile(tileX, tileY, centerX, centerY, radius) {
    const dx = tileX - centerX;
    const dy = tileY - centerY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    // Only highlight tiles on the border (outline)
    const borderThickness = 1.5; // Configurable border thickness
    return distance <= radius && distance >= (radius - borderThickness);
}
```

This ensures only the perimeter of the blast radius is highlighted, keeping interior tiles visible and updatable.

### State Management System

#### Overlay States
```javascript
const OVERLAY_STATES = {
    NONE: 0,           // No overlay visible
    ATOM_BOMB: 1,      // Atom bomb radius (30 tiles)
    HYDROGEN_BOMB: 2   // Hydrogen bomb radius (100 tiles)
};
```

#### Position Tracking
- **Mouse Coordinates**: Continuously tracked screen coordinates
- **World Coordinates**: Converted to game tile coordinates using TransformHandler
- **Change Detection**: Monitors position and radius changes to trigger updates
- **Cleanup Flags**: Manages when restoration is needed

### Performance Optimizations

#### Efficient Pixel Management
- **Minimal Processing**: Only processes tiles within radius bounds
- **Change-Based Updates**: Only updates when mouse position or overlay state changes
- **Boundary Checking**: Ensures all tile coordinates are within valid game bounds
- **Memory Management**: Properly cleans up stored pixel data when no longer needed

#### Anti-Recursion Protection
```javascript
let isApplyingOverlay = false; // Prevents infinite loops when restoring pixels
```

## Installation & Usage

### Installation
1. Install Tampermonkey browser extension
2. Create new userscript
3. Copy the contents of `openfront_nuke_overlay.user.js`
4. Save and enable the script

### Usage
1. Navigate to OpenFront.io and join a game
2. Press **Tab** to cycle through overlay modes:
   - First press: Shows Atom Bomb radius (30 pixels)
   - Second press: Shows Hydrogen Bomb radius (100 pixels)  
   - Third press: Hides overlay (back to none)
3. Move mouse around the map to position the radius indicator
4. The overlay automatically disappears when leaving the game

### Visual Indicators
- **Orange Circle**: Translucent filled area showing blast radius
- **Orange Border**: Solid stroke outline for better visibility
- **White Text**: Weapon name and radius value with black outline for readability
- **Real-time Movement**: Circle follows mouse cursor position

## Code Structure

### Main Functions
- `isInGame()`: Detects if player is in active game
- `createOverlayCanvas()`: Creates and positions overlay canvas
- `drawOverlay()`: Renders the radius circle and labels
- `handleKeyPress()`: Processes Tab key presses for state cycling
- `handleMouseMove()`: Updates mouse position and redraws overlay
- `monitorGameState()`: Tracks game entry/exit for cleanup

### Configuration Constants
```javascript
const NUKE_RADII = {
    ATOM_BOMB: 30,      // From game source: DefaultConfig.ts
    HYDROGEN_BOMB: 100  // nukeMagnitudes() function
};
```

## Debugging & Troubleshooting

### Console Logging
The script provides detailed console output:
- `[Nuke Overlay] Script loaded`: Script initialization
- `[Nuke Overlay] Game detected, initializing`: Game entry detected
- `[Nuke Overlay] Overlay canvas created`: Canvas overlay setup
- `[Nuke Overlay] Switched to: [State]`: Tab key state changes
- `[Nuke Overlay] Game ended, resetting state`: Game exit cleanup

### Common Issues

**Overlay Not Appearing**:
- Check console for initialization messages
- Verify game detection is working (canvas + UI elements present)
- Try pressing Tab multiple times to cycle states

**Position Offset**:
- Canvas positioning uses `getBoundingClientRect()` for accuracy
- Handles window scrolling and zoom levels
- Updates automatically on window resize

**Performance Impact**:
- Mouse tracking only active during games
- Rendering only occurs when overlay is visible
- Canvas operations are optimized for smooth performance

## Integration Notes

### Compatibility with Other Scripts
- Uses unique event listener approach to avoid conflicts
- Namespace isolation with IIFE wrapper
- Non-interfering canvas overlay system
- No global variable pollution

### Game Updates Resilience
- Uses semantic DOM selectors (control-panel, game-left-sidebar)
- Robust canvas detection methodology
- Graceful degradation if elements not found

## Future Enhancement Ideas

1. **Additional Nuke Types**: Support for MIRV warheads (12px inner, 18px outer)
2. **Color Customization**: User-configurable overlay colors
3. **Hotkey Customization**: Alternative key bindings beyond Tab
4. **Multiple Radius Display**: Show both inner and outer damage radii
5. **Range Ruler**: Distance measurement tool
6. **Strategic Overlay**: Integration with city/structure positioning

## Version History
- **v1.0**: Initial implementation with basic Tab cycling and mouse tracking
