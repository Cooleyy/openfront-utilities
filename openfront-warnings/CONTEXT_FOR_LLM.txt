OpenFront Gold Warning Script – Context and Design Notes

Last updated: 2025-08-16
Repo: openfront-warnings
Primary script: openfront_gold_warning.user.js (userscript injected on openfront.io)

Summary
- This userscript monitors the player's gold in the browser game OpenFront.io and plays an audio warning when gold reaches 125,000 for the first time in a game session.
- The warning consists of 3 consecutive beeps (800Hz sine wave, 500ms each with 100ms intervals) to alert the player that they should build an important building.
- The script automatically detects game state transitions, resets between games, and handles various edge cases like player death or spectator mode.

About the game (OpenFront.io) – relevant client behaviors for gold tracking
- The client is a web app (TypeScript/JS) that renders a game canvas and layered UI using LitElement custom elements.
- Player resources (gold, troops) are displayed in a control panel (`<control-panel>`) that appears during active gameplay.
- Gold values are rendered using a `renderNumber()` function that can display values as "125,000", "125k", "1.2M", etc.
- The player's gold is stored internally as a `bigint` in the PlayerImpl class and accessed via the `gold()` method.
- The control panel updates every game tick (roughly 10 times per second) with current resource values.
- Game state elements like `<game-left-sidebar>`, `<control-panel>`, and game canvas indicate active gameplay vs. lobby/menu state.

What this userscript does
1) Game State Detection
   - Monitors for the presence of key game UI elements: canvas, control-panel, game-left-sidebar
   - Detects transitions between lobby/menu and active gameplay
   - Automatically resets warning state when entering a new game
   - Handles player death/spectating by gracefully stopping gold monitoring

2) Gold Value Extraction
   - Primary method: Parses gold display from control-panel DOM elements
   - Looks for spans with `translate="no"` attribute containing formatted numbers
   - Supports multiple number formats: "125,000", "125k", "1.2M" with proper suffix conversion
   - Fallback method: Attempts to access game object directly through DOM element properties
   - Validates parsed values are within reasonable bounds (0-10M) to avoid false positives

3) Audio Warning System
   - Uses Web Audio API to generate synthetic warning sounds (no external audio files needed)
   - Generates 800Hz sine wave beeps with smooth fade-in/fade-out to avoid audio clicks
   - Plays 3 consecutive beeps (500ms duration, 100ms intervals) when threshold is reached
   - Handles browser audio policy restrictions by initializing AudioContext after user interaction
   - Automatically resumes suspended audio contexts

4) State Management
   - `warningTriggered`: Boolean flag preventing multiple warnings in same game session
   - `gameStarted`: Tracks whether we're currently in an active game
   - `playerFound`: Indicates successful gold value extraction
   - `lastKnownGold`: Stores most recent gold value for debugging/logging
   - All state resets automatically when transitioning between games

5) Monitoring Loop
   - Runs every 500ms (2Hz) to check gold threshold
   - Frequency chosen to be responsive without excessive CPU usage
   - Includes comprehensive error handling and logging for debugging

Key technical implementation details
- File: openfront_gold_warning.user.js
- Userscript metadata configured for openfront.io and localhost development domains
- Main execution wrapped in IIFE to avoid global namespace pollution
- Uses modern JavaScript features (const/let, arrow functions, template literals)

Core functions:
- `getCurrentGold()`: Extracts current gold value from game UI, returns null if unavailable
- `isInGame()`: Detects if player is in active game vs. lobby/menu
- `playWarningSound()`: Generates and plays audio warning using Web Audio API
- `checkGoldThreshold()`: Main monitoring loop function
- `resetForNewGame()`: Clears all state flags for new game session

Audio system design:
- Uses Web Audio API for cross-browser compatibility and no external dependencies
- AudioContext initialized lazily after first user interaction (browser requirement)
- 800Hz frequency chosen as attention-grabbing but not harsh
- Envelope shaping (fade-in/out) prevents audio artifacts
- Multiple beeps ensure notification is noticed even with brief attention lapses

Gold detection robustness:
- Primary parsing targets the control panel's formatted display text
- Regex pattern handles common number formats with comma separators and K/M suffixes
- Range validation prevents false positives from parsing unrelated numbers
- Fallback direct object access for cases where DOM parsing fails
- Graceful degradation when gold cannot be read (player death, UI changes)

Game state detection:
- Multiple UI elements checked to confirm active gameplay state
- Handles smooth transitions between lobby and game
- Resets warning state appropriately for new games
- Distinguishes between temporary UI unavailability and actual state changes

Error handling and logging:
- Comprehensive console logging with distinctive prefixes for easy debugging
- Try-catch blocks around critical operations
- Graceful failures that don't break the monitoring loop
- Visual console notification when threshold is reached for easy verification

Browser compatibility considerations:
- Web Audio API (supported in all modern browsers)
- Uses feature detection for AudioContext (webkit prefix fallback)
- Standard DOM APIs and event listeners
- No external dependencies or modern JS features requiring polyfills

Known limitations and edge cases
1) Gold detection dependencies:
   - Relies on control panel DOM structure remaining stable
   - Number formatting must match expected patterns
   - Will fail if game completely changes resource display method
   
2) Audio system constraints:
   - Subject to browser autoplay policies (mitigated by user interaction detection)
   - May not work if user has disabled Web Audio API
   - Audio timing may vary slightly between browsers
   
3) Performance considerations:
   - 500ms polling interval chosen as compromise between responsiveness and CPU usage
   - DOM queries in monitoring loop could impact performance on very slow devices
   - No cleanup of old console logs (browser handles this automatically)

4) Game state edge cases:
   - May briefly lose track during rapid UI transitions
   - Spectator mode handling relies on inability to read player gold
   - Reconnection after network issues may cause temporary confusion

Future improvement opportunities
1) Enhanced gold detection:
   - Direct integration with game's internal state (requires more coupling to game internals)
   - MutationObserver to detect control panel updates instead of polling
   - Pattern matching improvements for new number formats
   
2) Configuration options:
   - Customizable gold threshold (currently hardcoded to 125k)
   - Audio settings (frequency, duration, beep count)
   - Enable/disable toggle without uninstalling script
   - Visual notification options in addition to audio
   
3) Multiple threshold support:
   - Different warnings for different gold amounts (50k, 125k, 250k, etc.)
   - Progressive warning system (more urgent as time passes)
   - Building-specific reminders based on current gold amount
   
4) Robustness improvements:
   - Better handling of game updates that change UI structure
   - Recovery mechanisms for temporary gold reading failures
   - Performance optimization for monitoring loop
   - Memory leak prevention for long-running sessions

5) Integration features:
   - Coordination with other OpenFront helper scripts
   - Shared state management between multiple userscripts
   - Export/import of user preferences

Debugging information
- All script activity logged to console with "[OpenFront Gold Warning]" prefix
- Gold threshold reached triggers prominent styled console message
- State transitions (game start/end) are logged
- Gold parsing failures include error details
- Audio system initialization and failures are logged

Testing considerations:
- Test with different number formats in control panel
- Verify audio works after browser restart (audio context persistence)
- Test state reset between multiple games in same browser session
- Verify graceful handling of player death/spectating
- Test on different screen sizes and UI configurations

Installation and usage:
1. Install Tampermonkey or similar userscript manager
2. Add the openfront_gold_warning.user.js script
3. Visit openfront.io and start playing
4. Script activates automatically and logs startup message to console
5. When gold reaches 125k for first time in a game, audio warning plays
6. Script resets automatically for each new game

Security and safety:
- Script only reads from game DOM, never modifies game state
- No network requests or external communications
- Audio generation uses only browser APIs
- No access to sensitive user data
- Runs only on openfront.io domains and localhost

Game version compatibility:
- Tested with OpenFront.io as of August 2025
- Depends on control-panel custom element structure
- Uses semantic DOM queries rather than specific class names where possible
- Should be resilient to minor UI changes but may need updates for major overhauls

Related scripts in openfront-utilities:
- openfront-hotkeys: Building placement automation (complementary functionality)
- Future scripts could coordinate warnings with automated building actions

Maintenance notes:
- Monitor game updates that might change control panel structure
- Update number format regex if game changes gold display formatting  
- Consider performance impact if monitoring frequency needs adjustment
- Check Web Audio API compatibility with future browser updates

Contact points in OpenFrontIO for reference (not part of this repo):
- ControlPanel.ts: Contains gold display logic and DOM structure
- PlayerImpl.ts: Internal gold storage and gold() accessor method
- Utils.ts: renderNumber() function that formats displayed gold values
- GameView.ts: Game state management and myPlayer() access

Development workflow for modifications:
1. Make changes to openfront_gold_warning.user.js
2. Test in browser with Tampermonkey developer mode
3. Verify audio functionality after user interaction
4. Test game state transitions and multiple game sessions
5. Check console logs for any new errors or warnings
6. Update version number in userscript header
7. Update this CONTEXT file with any behavioral changes

End of file.
